services:
  postgres:
    container_name: Trainers
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=Trainers'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persistent storage for PostgreSQL data
#    volumes:
#    #for some reason need to run this manually within the postgres docker using 'docker-compose exec postgres bash  "
#      - ./data.sql:/docker-entrypoint-initdb.d/data.sql
    ports:
      - '5433:5432'
    networks:
      - trainer_network


  trainer-app:
      build:
        # basically the location of the docker file : context is the path , and dockerfile is the name of the dockerfile
        context: .
        dockerfile: Dockerfile
      container_name: trainer_app
      ports:
        - "8080:8081"
      environment:
        #When you run your application inside a Docker container as defined in your docker-compose.yml, you should not use localhost to refer to other services (like PostgreSQL) running in separate containers. Instead, you use the service name defined in your docker-compose.yml, which acts as a hostname within the Docker network
        SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/Trainers # Connection URL, note it needs to be 5432 ,5432, which is the default PostgreSQL port. You shouldn't be using 5433 in the connection string since that's the port mapping from your host to the container. Also note that the service of the DB is required in the url so thats why you see postgres
        SPRING_DATASOURCE_USERNAME: myuser   # Database username
        SPRING_DATASOURCE_PASSWORD: secret # Database password
      depends_on:
        - postgres                   # Ensure PostgreSQL is started before this service
      networks:
        - trainer_network

volumes:
  postgres_data: # you ensure that your PostgreSQL data is stored persistently outside the container, protecting it from loss when the container is stopped or removed.

networks: #using a custom network in Docker Compose is to ensure that your containers can communicate more reliably, with fewer chances for connection issues or conflicts with other containers on the default network
  trainer_network:
    driver: bridge
  #    volumes:
#     - './sqlFiles:/docker-entrypoint-initdb.d' make sure you do docker-compose down then up -d to restart container
  # also make sure that you check the the logs of your instance by using docker-compose logs db
  #5433 port on host is mapped to 5432
#    inside the docker container where
#    PostgresSQL is running. This allows access to PostgreSQL
#  from the host machine using port 5433
#  The first 5433 represents the port on your host machine.
#  The second 5432 represents the port inside the Docker container where PostgreSQL is running.
#  So, any traffic sent to port 5433 on your host machine will be forwarded to port 5432 inside
#  the Docker container, where PostgreSQL is listening.